/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// ReservationSessionSerializerReadOnlyState - struct for ReservationSessionSerializerReadOnlyState
type ReservationSessionSerializerReadOnlyState struct {
	NullEnum *NullEnum
	StateEnum *StateEnum
}

// NullEnumAsReservationSessionSerializerReadOnlyState is a convenience function that returns NullEnum wrapped in ReservationSessionSerializerReadOnlyState
func NullEnumAsReservationSessionSerializerReadOnlyState(v *NullEnum) ReservationSessionSerializerReadOnlyState {
	return ReservationSessionSerializerReadOnlyState{
		NullEnum: v,
	}
}

// StateEnumAsReservationSessionSerializerReadOnlyState is a convenience function that returns StateEnum wrapped in ReservationSessionSerializerReadOnlyState
func StateEnumAsReservationSessionSerializerReadOnlyState(v *StateEnum) ReservationSessionSerializerReadOnlyState {
	return ReservationSessionSerializerReadOnlyState{
		StateEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReservationSessionSerializerReadOnlyState) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into NullEnum
	err = newStrictDecoder(data).Decode(&dst.NullEnum)
	if err == nil {
		jsonNullEnum, _ := json.Marshal(dst.NullEnum)
		if string(jsonNullEnum) == "{}" { // empty struct
			dst.NullEnum = nil
		} else {
			match++
		}
	} else {
		dst.NullEnum = nil
	}

	// try to unmarshal data into StateEnum
	err = newStrictDecoder(data).Decode(&dst.StateEnum)
	if err == nil {
		jsonStateEnum, _ := json.Marshal(dst.StateEnum)
		if string(jsonStateEnum) == "{}" { // empty struct
			dst.StateEnum = nil
		} else {
			match++
		}
	} else {
		dst.StateEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NullEnum = nil
		dst.StateEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReservationSessionSerializerReadOnlyState)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReservationSessionSerializerReadOnlyState)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReservationSessionSerializerReadOnlyState) MarshalJSON() ([]byte, error) {
	if src.NullEnum != nil {
		return json.Marshal(&src.NullEnum)
	}

	if src.StateEnum != nil {
		return json.Marshal(&src.StateEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReservationSessionSerializerReadOnlyState) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NullEnum != nil {
		return obj.NullEnum
	}

	if obj.StateEnum != nil {
		return obj.StateEnum
	}

	// all schemas are nil
	return nil
}

type NullableReservationSessionSerializerReadOnlyState struct {
	value *ReservationSessionSerializerReadOnlyState
	isSet bool
}

func (v NullableReservationSessionSerializerReadOnlyState) Get() *ReservationSessionSerializerReadOnlyState {
	return v.value
}

func (v *NullableReservationSessionSerializerReadOnlyState) Set(val *ReservationSessionSerializerReadOnlyState) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationSessionSerializerReadOnlyState) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationSessionSerializerReadOnlyState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationSessionSerializerReadOnlyState(val *ReservationSessionSerializerReadOnlyState) *NullableReservationSessionSerializerReadOnlyState {
	return &NullableReservationSessionSerializerReadOnlyState{value: val, isSet: true}
}

func (v NullableReservationSessionSerializerReadOnlyState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationSessionSerializerReadOnlyState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


