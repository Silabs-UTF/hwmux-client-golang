/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.26.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// checks if the PermissionGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionGroup{}

// PermissionGroup struct for PermissionGroup
type PermissionGroup struct {
	Id int32 `json:"id"`
	Permissions []string `json:"permissions"`
	Name string `json:"name"`
}

type _PermissionGroup PermissionGroup

// NewPermissionGroup instantiates a new PermissionGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionGroup(id int32, permissions []string, name string) *PermissionGroup {
	this := PermissionGroup{}
	this.Id = id
	this.Permissions = permissions
	this.Name = name
	return &this
}

// NewPermissionGroupWithDefaults instantiates a new PermissionGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionGroupWithDefaults() *PermissionGroup {
	this := PermissionGroup{}
	return &this
}

// GetId returns the Id field value
func (o *PermissionGroup) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PermissionGroup) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PermissionGroup) SetId(v int32) {
	o.Id = v
}

// GetPermissions returns the Permissions field value
func (o *PermissionGroup) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *PermissionGroup) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *PermissionGroup) SetPermissions(v []string) {
	o.Permissions = v
}

// GetName returns the Name field value
func (o *PermissionGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PermissionGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PermissionGroup) SetName(v string) {
	o.Name = v
}

func (o PermissionGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["permissions"] = o.Permissions
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *PermissionGroup) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"permissions",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPermissionGroup := _PermissionGroup{}

	err = json.Unmarshal(bytes, &varPermissionGroup)

	if err != nil {
		return err
	}

	*o = PermissionGroup(varPermissionGroup)

	return err
}

type NullablePermissionGroup struct {
	value *PermissionGroup
	isSet bool
}

func (v NullablePermissionGroup) Get() *PermissionGroup {
	return v.value
}

func (v *NullablePermissionGroup) Set(val *PermissionGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionGroup(val *PermissionGroup) *NullablePermissionGroup {
	return &NullablePermissionGroup{value: val, isSet: true}
}

func (v NullablePermissionGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


