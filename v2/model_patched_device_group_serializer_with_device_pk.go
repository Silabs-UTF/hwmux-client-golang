/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.36.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
)

// PatchedDeviceGroupSerializerWithDevicePk struct for PatchedDeviceGroupSerializerWithDevicePk
type PatchedDeviceGroupSerializerWithDevicePk struct {
	Id *int32 `json:"id,omitempty"`
	PermissionGroups []string `json:"permission_groups,omitempty"`
	Devices []int32 `json:"devices,omitempty"`
	Online *bool `json:"online,omitempty"`
	Status *string `json:"status,omitempty"`
	LocDesc []string `json:"loc_desc,omitempty"`
	IsReserved NullableBool `json:"is_reserved,omitempty"`
	Name *string `json:"name,omitempty"`
	EnableAhs *bool `json:"enable_ahs,omitempty"`
	EnableAhsActions *bool `json:"enable_ahs_actions,omitempty"`
	EnableAhsCas *bool `json:"enable_ahs_cas,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Source *SourceEnum `json:"source,omitempty"`
	IsReservedFilter *bool `json:"is_reserved_filter,omitempty"`
}

// NewPatchedDeviceGroupSerializerWithDevicePk instantiates a new PatchedDeviceGroupSerializerWithDevicePk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedDeviceGroupSerializerWithDevicePk() *PatchedDeviceGroupSerializerWithDevicePk {
	this := PatchedDeviceGroupSerializerWithDevicePk{}
	return &this
}

// NewPatchedDeviceGroupSerializerWithDevicePkWithDefaults instantiates a new PatchedDeviceGroupSerializerWithDevicePk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedDeviceGroupSerializerWithDevicePkWithDefaults() *PatchedDeviceGroupSerializerWithDevicePk {
	this := PatchedDeviceGroupSerializerWithDevicePk{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetId(v int32) {
	o.Id = &v
}

// GetPermissionGroups returns the PermissionGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetPermissionGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PermissionGroups
}

// GetPermissionGroupsOk returns a tuple with the PermissionGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetPermissionGroupsOk() ([]string, bool) {
	if o == nil || isNil(o.PermissionGroups) {
    return nil, false
	}
	return o.PermissionGroups, true
}

// HasPermissionGroups returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasPermissionGroups() bool {
	if o != nil && isNil(o.PermissionGroups) {
		return true
	}

	return false
}

// SetPermissionGroups gets a reference to the given []string and assigns it to the PermissionGroups field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetPermissionGroups(v []string) {
	o.PermissionGroups = v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetDevices() []int32 {
	if o == nil || isNil(o.Devices) {
		var ret []int32
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetDevicesOk() ([]int32, bool) {
	if o == nil || isNil(o.Devices) {
    return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasDevices() bool {
	if o != nil && !isNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []int32 and assigns it to the Devices field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetDevices(v []int32) {
	o.Devices = v
}

// GetOnline returns the Online field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetOnline() bool {
	if o == nil || isNil(o.Online) {
		var ret bool
		return ret
	}
	return *o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetOnlineOk() (*bool, bool) {
	if o == nil || isNil(o.Online) {
    return nil, false
	}
	return o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasOnline() bool {
	if o != nil && !isNil(o.Online) {
		return true
	}

	return false
}

// SetOnline gets a reference to the given bool and assigns it to the Online field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetOnline(v bool) {
	o.Online = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetStatus(v string) {
	o.Status = &v
}

// GetLocDesc returns the LocDesc field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetLocDesc() []string {
	if o == nil || isNil(o.LocDesc) {
		var ret []string
		return ret
	}
	return o.LocDesc
}

// GetLocDescOk returns a tuple with the LocDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetLocDescOk() ([]string, bool) {
	if o == nil || isNil(o.LocDesc) {
    return nil, false
	}
	return o.LocDesc, true
}

// HasLocDesc returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasLocDesc() bool {
	if o != nil && !isNil(o.LocDesc) {
		return true
	}

	return false
}

// SetLocDesc gets a reference to the given []string and assigns it to the LocDesc field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetLocDesc(v []string) {
	o.LocDesc = v
}

// GetIsReserved returns the IsReserved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetIsReserved() bool {
	if o == nil || isNil(o.IsReserved.Get()) {
		var ret bool
		return ret
	}
	return *o.IsReserved.Get()
}

// GetIsReservedOk returns a tuple with the IsReserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetIsReservedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IsReserved.Get(), o.IsReserved.IsSet()
}

// HasIsReserved returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasIsReserved() bool {
	if o != nil && o.IsReserved.IsSet() {
		return true
	}

	return false
}

// SetIsReserved gets a reference to the given NullableBool and assigns it to the IsReserved field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetIsReserved(v bool) {
	o.IsReserved.Set(&v)
}
// SetIsReservedNil sets the value for IsReserved to be an explicit nil
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetIsReservedNil() {
	o.IsReserved.Set(nil)
}

// UnsetIsReserved ensures that no value is present for IsReserved, not even an explicit nil
func (o *PatchedDeviceGroupSerializerWithDevicePk) UnsetIsReserved() {
	o.IsReserved.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetName(v string) {
	o.Name = &v
}

// GetEnableAhs returns the EnableAhs field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetEnableAhs() bool {
	if o == nil || isNil(o.EnableAhs) {
		var ret bool
		return ret
	}
	return *o.EnableAhs
}

// GetEnableAhsOk returns a tuple with the EnableAhs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetEnableAhsOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAhs) {
    return nil, false
	}
	return o.EnableAhs, true
}

// HasEnableAhs returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasEnableAhs() bool {
	if o != nil && !isNil(o.EnableAhs) {
		return true
	}

	return false
}

// SetEnableAhs gets a reference to the given bool and assigns it to the EnableAhs field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetEnableAhs(v bool) {
	o.EnableAhs = &v
}

// GetEnableAhsActions returns the EnableAhsActions field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetEnableAhsActions() bool {
	if o == nil || isNil(o.EnableAhsActions) {
		var ret bool
		return ret
	}
	return *o.EnableAhsActions
}

// GetEnableAhsActionsOk returns a tuple with the EnableAhsActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetEnableAhsActionsOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAhsActions) {
    return nil, false
	}
	return o.EnableAhsActions, true
}

// HasEnableAhsActions returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasEnableAhsActions() bool {
	if o != nil && !isNil(o.EnableAhsActions) {
		return true
	}

	return false
}

// SetEnableAhsActions gets a reference to the given bool and assigns it to the EnableAhsActions field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetEnableAhsActions(v bool) {
	o.EnableAhsActions = &v
}

// GetEnableAhsCas returns the EnableAhsCas field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetEnableAhsCas() bool {
	if o == nil || isNil(o.EnableAhsCas) {
		var ret bool
		return ret
	}
	return *o.EnableAhsCas
}

// GetEnableAhsCasOk returns a tuple with the EnableAhsCas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetEnableAhsCasOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAhsCas) {
    return nil, false
	}
	return o.EnableAhsCas, true
}

// HasEnableAhsCas returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasEnableAhsCas() bool {
	if o != nil && !isNil(o.EnableAhsCas) {
		return true
	}

	return false
}

// SetEnableAhsCas gets a reference to the given bool and assigns it to the EnableAhsCas field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetEnableAhsCas(v bool) {
	o.EnableAhsCas = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
    return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasMetadata() bool {
	if o != nil && isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetSource() SourceEnum {
	if o == nil || isNil(o.Source) {
		var ret SourceEnum
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetSourceOk() (*SourceEnum, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given SourceEnum and assigns it to the Source field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetSource(v SourceEnum) {
	o.Source = &v
}

// GetIsReservedFilter returns the IsReservedFilter field value if set, zero value otherwise.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetIsReservedFilter() bool {
	if o == nil || isNil(o.IsReservedFilter) {
		var ret bool
		return ret
	}
	return *o.IsReservedFilter
}

// GetIsReservedFilterOk returns a tuple with the IsReservedFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) GetIsReservedFilterOk() (*bool, bool) {
	if o == nil || isNil(o.IsReservedFilter) {
    return nil, false
	}
	return o.IsReservedFilter, true
}

// HasIsReservedFilter returns a boolean if a field has been set.
func (o *PatchedDeviceGroupSerializerWithDevicePk) HasIsReservedFilter() bool {
	if o != nil && !isNil(o.IsReservedFilter) {
		return true
	}

	return false
}

// SetIsReservedFilter gets a reference to the given bool and assigns it to the IsReservedFilter field.
func (o *PatchedDeviceGroupSerializerWithDevicePk) SetIsReservedFilter(v bool) {
	o.IsReservedFilter = &v
}

func (o PatchedDeviceGroupSerializerWithDevicePk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.PermissionGroups != nil {
		toSerialize["permission_groups"] = o.PermissionGroups
	}
	if !isNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !isNil(o.Online) {
		toSerialize["online"] = o.Online
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.LocDesc) {
		toSerialize["loc_desc"] = o.LocDesc
	}
	if o.IsReserved.IsSet() {
		toSerialize["is_reserved"] = o.IsReserved.Get()
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.EnableAhs) {
		toSerialize["enable_ahs"] = o.EnableAhs
	}
	if !isNil(o.EnableAhsActions) {
		toSerialize["enable_ahs_actions"] = o.EnableAhsActions
	}
	if !isNil(o.EnableAhsCas) {
		toSerialize["enable_ahs_cas"] = o.EnableAhsCas
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.IsReservedFilter) {
		toSerialize["is_reserved_filter"] = o.IsReservedFilter
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedDeviceGroupSerializerWithDevicePk struct {
	value *PatchedDeviceGroupSerializerWithDevicePk
	isSet bool
}

func (v NullablePatchedDeviceGroupSerializerWithDevicePk) Get() *PatchedDeviceGroupSerializerWithDevicePk {
	return v.value
}

func (v *NullablePatchedDeviceGroupSerializerWithDevicePk) Set(val *PatchedDeviceGroupSerializerWithDevicePk) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedDeviceGroupSerializerWithDevicePk) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedDeviceGroupSerializerWithDevicePk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedDeviceGroupSerializerWithDevicePk(val *PatchedDeviceGroupSerializerWithDevicePk) *NullablePatchedDeviceGroupSerializerWithDevicePk {
	return &NullablePatchedDeviceGroupSerializerWithDevicePk{value: val, isSet: true}
}

func (v NullablePatchedDeviceGroupSerializerWithDevicePk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedDeviceGroupSerializerWithDevicePk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


