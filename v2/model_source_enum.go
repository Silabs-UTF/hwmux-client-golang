/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.36.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// SourceEnum * `TERRAFORM` - Terraform * `XML` - XML * `UI` - UI * `OTHER` - Other
type SourceEnum string

// List of SourceEnum
const (
	TERRAFORM SourceEnum = "TERRAFORM"
	XML SourceEnum = "XML"
	UI SourceEnum = "UI"
	OTHER SourceEnum = "OTHER"
)

// All allowed values of SourceEnum enum
var AllowedSourceEnumEnumValues = []SourceEnum{
	"TERRAFORM",
	"XML",
	"UI",
	"OTHER",
}

func (v *SourceEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SourceEnum(value)
	for _, existing := range AllowedSourceEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SourceEnum", value)
}

// NewSourceEnumFromValue returns a pointer to a valid SourceEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSourceEnumFromValue(v string) (*SourceEnum, error) {
	ev := SourceEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SourceEnum: valid values are %v", v, AllowedSourceEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SourceEnum) IsValid() bool {
	for _, existing := range AllowedSourceEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SourceEnum value
func (v SourceEnum) Ptr() *SourceEnum {
	return &v
}

type NullableSourceEnum struct {
	value *SourceEnum
	isSet bool
}

func (v NullableSourceEnum) Get() *SourceEnum {
	return v.value
}

func (v *NullableSourceEnum) Set(val *SourceEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceEnum(val *SourceEnum) *NullableSourceEnum {
	return &NullableSourceEnum{value: val, isSet: true}
}

func (v NullableSourceEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

