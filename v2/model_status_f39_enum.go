/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.31.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// StatusF39Enum * `ACTIVE` - Active * `DISABLED` - Disabled * `OFFLINE` - Offline
type StatusF39Enum string

// List of StatusF39Enum
const (
	ACTIVE StatusF39Enum = "ACTIVE"
	DISABLED StatusF39Enum = "DISABLED"
	OFFLINE StatusF39Enum = "OFFLINE"
)

// All allowed values of StatusF39Enum enum
var AllowedStatusF39EnumEnumValues = []StatusF39Enum{
	"ACTIVE",
	"DISABLED",
	"OFFLINE",
}

func (v *StatusF39Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusF39Enum(value)
	for _, existing := range AllowedStatusF39EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusF39Enum", value)
}

// NewStatusF39EnumFromValue returns a pointer to a valid StatusF39Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusF39EnumFromValue(v string) (*StatusF39Enum, error) {
	ev := StatusF39Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusF39Enum: valid values are %v", v, AllowedStatusF39EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusF39Enum) IsValid() bool {
	for _, existing := range AllowedStatusF39EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusF39Enum value
func (v StatusF39Enum) Ptr() *StatusF39Enum {
	return &v
}

type NullableStatusF39Enum struct {
	value *StatusF39Enum
	isSet bool
}

func (v NullableStatusF39Enum) Get() *StatusF39Enum {
	return v.value
}

func (v *NullableStatusF39Enum) Set(val *StatusF39Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusF39Enum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusF39Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusF39Enum(val *StatusF39Enum) *NullableStatusF39Enum {
	return &NullableStatusF39Enum{value: val, isSet: true}
}

func (v NullableStatusF39Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusF39Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

