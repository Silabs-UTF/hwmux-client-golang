/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// ResourceTypeEnum * `DEVICE` - Device * `LABEL` - Label * `GROUP` - Group
type ResourceTypeEnum string

// List of ResourceTypeEnum
const (
	RESOURCETYPEENUM_DEVICE ResourceTypeEnum = "DEVICE"
	RESOURCETYPEENUM_LABEL ResourceTypeEnum = "LABEL"
	RESOURCETYPEENUM_GROUP ResourceTypeEnum = "GROUP"
)

// All allowed values of ResourceTypeEnum enum
var AllowedResourceTypeEnumEnumValues = []ResourceTypeEnum{
	"DEVICE",
	"LABEL",
	"GROUP",
}

func (v *ResourceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceTypeEnum(value)
	for _, existing := range AllowedResourceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceTypeEnum", value)
}

// NewResourceTypeEnumFromValue returns a pointer to a valid ResourceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceTypeEnumFromValue(v string) (*ResourceTypeEnum, error) {
	ev := ResourceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceTypeEnum: valid values are %v", v, AllowedResourceTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceTypeEnum) IsValid() bool {
	for _, existing := range AllowedResourceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceTypeEnum value
func (v ResourceTypeEnum) Ptr() *ResourceTypeEnum {
	return &v
}

type NullableResourceTypeEnum struct {
	value *ResourceTypeEnum
	isSet bool
}

func (v NullableResourceTypeEnum) Get() *ResourceTypeEnum {
	return v.value
}

func (v *NullableResourceTypeEnum) Set(val *ResourceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeEnum(val *ResourceTypeEnum) *NullableResourceTypeEnum {
	return &NullableResourceTypeEnum{value: val, isSet: true}
}

func (v NullableResourceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

