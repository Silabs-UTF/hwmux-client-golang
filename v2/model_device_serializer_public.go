/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.36.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"time"
)

// DeviceSerializerPublic Serializes Device querysets to JSON
type DeviceSerializerPublic struct {
	Id int32 `json:"id"`
	PermissionGroups []string `json:"permission_groups,omitempty"`
	Part Part `json:"part"`
	LocDesc string `json:"loc_desc"`
	IsReserved NullableBool `json:"is_reserved"`
	SnOrName NullableString `json:"sn_or_name,omitempty"`
	Source *SourceEnum `json:"source,omitempty"`
	SocketedChip *string `json:"socketed_chip,omitempty"`
	IsWstk *bool `json:"is_wstk,omitempty"`
	Uri NullableString `json:"uri,omitempty"`
	Online *bool `json:"online,omitempty"`
	Status *StatusEnum `json:"status,omitempty"`
	LastUpdate time.Time `json:"last_update"`
	DateCreated time.Time `json:"date_created"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	IsReservedFilter *bool `json:"is_reserved_filter,omitempty"`
	WstkPart NullableString `json:"wstk_part,omitempty"`
}

// NewDeviceSerializerPublic instantiates a new DeviceSerializerPublic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSerializerPublic(id int32, part Part, locDesc string, isReserved NullableBool, lastUpdate time.Time, dateCreated time.Time) *DeviceSerializerPublic {
	this := DeviceSerializerPublic{}
	this.Id = id
	this.Part = part
	this.LocDesc = locDesc
	this.IsReserved = isReserved
	this.LastUpdate = lastUpdate
	this.DateCreated = dateCreated
	return &this
}

// NewDeviceSerializerPublicWithDefaults instantiates a new DeviceSerializerPublic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSerializerPublicWithDefaults() *DeviceSerializerPublic {
	this := DeviceSerializerPublic{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceSerializerPublic) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceSerializerPublic) SetId(v int32) {
	o.Id = v
}

// GetPermissionGroups returns the PermissionGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceSerializerPublic) GetPermissionGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PermissionGroups
}

// GetPermissionGroupsOk returns a tuple with the PermissionGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceSerializerPublic) GetPermissionGroupsOk() ([]string, bool) {
	if o == nil || isNil(o.PermissionGroups) {
    return nil, false
	}
	return o.PermissionGroups, true
}

// HasPermissionGroups returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasPermissionGroups() bool {
	if o != nil && isNil(o.PermissionGroups) {
		return true
	}

	return false
}

// SetPermissionGroups gets a reference to the given []string and assigns it to the PermissionGroups field.
func (o *DeviceSerializerPublic) SetPermissionGroups(v []string) {
	o.PermissionGroups = v
}

// GetPart returns the Part field value
func (o *DeviceSerializerPublic) GetPart() Part {
	if o == nil {
		var ret Part
		return ret
	}

	return o.Part
}

// GetPartOk returns a tuple with the Part field value
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetPartOk() (*Part, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Part, true
}

// SetPart sets field value
func (o *DeviceSerializerPublic) SetPart(v Part) {
	o.Part = v
}

// GetLocDesc returns the LocDesc field value
func (o *DeviceSerializerPublic) GetLocDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocDesc
}

// GetLocDescOk returns a tuple with the LocDesc field value
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetLocDescOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LocDesc, true
}

// SetLocDesc sets field value
func (o *DeviceSerializerPublic) SetLocDesc(v string) {
	o.LocDesc = v
}

// GetIsReserved returns the IsReserved field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *DeviceSerializerPublic) GetIsReserved() bool {
	if o == nil || o.IsReserved.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsReserved.Get()
}

// GetIsReservedOk returns a tuple with the IsReserved field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceSerializerPublic) GetIsReservedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IsReserved.Get(), o.IsReserved.IsSet()
}

// SetIsReserved sets field value
func (o *DeviceSerializerPublic) SetIsReserved(v bool) {
	o.IsReserved.Set(&v)
}

// GetSnOrName returns the SnOrName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceSerializerPublic) GetSnOrName() string {
	if o == nil || isNil(o.SnOrName.Get()) {
		var ret string
		return ret
	}
	return *o.SnOrName.Get()
}

// GetSnOrNameOk returns a tuple with the SnOrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceSerializerPublic) GetSnOrNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SnOrName.Get(), o.SnOrName.IsSet()
}

// HasSnOrName returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasSnOrName() bool {
	if o != nil && o.SnOrName.IsSet() {
		return true
	}

	return false
}

// SetSnOrName gets a reference to the given NullableString and assigns it to the SnOrName field.
func (o *DeviceSerializerPublic) SetSnOrName(v string) {
	o.SnOrName.Set(&v)
}
// SetSnOrNameNil sets the value for SnOrName to be an explicit nil
func (o *DeviceSerializerPublic) SetSnOrNameNil() {
	o.SnOrName.Set(nil)
}

// UnsetSnOrName ensures that no value is present for SnOrName, not even an explicit nil
func (o *DeviceSerializerPublic) UnsetSnOrName() {
	o.SnOrName.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DeviceSerializerPublic) GetSource() SourceEnum {
	if o == nil || isNil(o.Source) {
		var ret SourceEnum
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetSourceOk() (*SourceEnum, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given SourceEnum and assigns it to the Source field.
func (o *DeviceSerializerPublic) SetSource(v SourceEnum) {
	o.Source = &v
}

// GetSocketedChip returns the SocketedChip field value if set, zero value otherwise.
func (o *DeviceSerializerPublic) GetSocketedChip() string {
	if o == nil || isNil(o.SocketedChip) {
		var ret string
		return ret
	}
	return *o.SocketedChip
}

// GetSocketedChipOk returns a tuple with the SocketedChip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetSocketedChipOk() (*string, bool) {
	if o == nil || isNil(o.SocketedChip) {
    return nil, false
	}
	return o.SocketedChip, true
}

// HasSocketedChip returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasSocketedChip() bool {
	if o != nil && !isNil(o.SocketedChip) {
		return true
	}

	return false
}

// SetSocketedChip gets a reference to the given string and assigns it to the SocketedChip field.
func (o *DeviceSerializerPublic) SetSocketedChip(v string) {
	o.SocketedChip = &v
}

// GetIsWstk returns the IsWstk field value if set, zero value otherwise.
func (o *DeviceSerializerPublic) GetIsWstk() bool {
	if o == nil || isNil(o.IsWstk) {
		var ret bool
		return ret
	}
	return *o.IsWstk
}

// GetIsWstkOk returns a tuple with the IsWstk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetIsWstkOk() (*bool, bool) {
	if o == nil || isNil(o.IsWstk) {
    return nil, false
	}
	return o.IsWstk, true
}

// HasIsWstk returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasIsWstk() bool {
	if o != nil && !isNil(o.IsWstk) {
		return true
	}

	return false
}

// SetIsWstk gets a reference to the given bool and assigns it to the IsWstk field.
func (o *DeviceSerializerPublic) SetIsWstk(v bool) {
	o.IsWstk = &v
}

// GetUri returns the Uri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceSerializerPublic) GetUri() string {
	if o == nil || isNil(o.Uri.Get()) {
		var ret string
		return ret
	}
	return *o.Uri.Get()
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceSerializerPublic) GetUriOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Uri.Get(), o.Uri.IsSet()
}

// HasUri returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasUri() bool {
	if o != nil && o.Uri.IsSet() {
		return true
	}

	return false
}

// SetUri gets a reference to the given NullableString and assigns it to the Uri field.
func (o *DeviceSerializerPublic) SetUri(v string) {
	o.Uri.Set(&v)
}
// SetUriNil sets the value for Uri to be an explicit nil
func (o *DeviceSerializerPublic) SetUriNil() {
	o.Uri.Set(nil)
}

// UnsetUri ensures that no value is present for Uri, not even an explicit nil
func (o *DeviceSerializerPublic) UnsetUri() {
	o.Uri.Unset()
}

// GetOnline returns the Online field value if set, zero value otherwise.
func (o *DeviceSerializerPublic) GetOnline() bool {
	if o == nil || isNil(o.Online) {
		var ret bool
		return ret
	}
	return *o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetOnlineOk() (*bool, bool) {
	if o == nil || isNil(o.Online) {
    return nil, false
	}
	return o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasOnline() bool {
	if o != nil && !isNil(o.Online) {
		return true
	}

	return false
}

// SetOnline gets a reference to the given bool and assigns it to the Online field.
func (o *DeviceSerializerPublic) SetOnline(v bool) {
	o.Online = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceSerializerPublic) GetStatus() StatusEnum {
	if o == nil || isNil(o.Status) {
		var ret StatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetStatusOk() (*StatusEnum, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusEnum and assigns it to the Status field.
func (o *DeviceSerializerPublic) SetStatus(v StatusEnum) {
	o.Status = &v
}

// GetLastUpdate returns the LastUpdate field value
func (o *DeviceSerializerPublic) GetLastUpdate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastUpdate, true
}

// SetLastUpdate sets field value
func (o *DeviceSerializerPublic) SetLastUpdate(v time.Time) {
	o.LastUpdate = v
}

// GetDateCreated returns the DateCreated field value
func (o *DeviceSerializerPublic) GetDateCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *DeviceSerializerPublic) SetDateCreated(v time.Time) {
	o.DateCreated = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DeviceSerializerPublic) GetMetadata() map[string]interface{} {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
    return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *DeviceSerializerPublic) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetIsReservedFilter returns the IsReservedFilter field value if set, zero value otherwise.
func (o *DeviceSerializerPublic) GetIsReservedFilter() bool {
	if o == nil || isNil(o.IsReservedFilter) {
		var ret bool
		return ret
	}
	return *o.IsReservedFilter
}

// GetIsReservedFilterOk returns a tuple with the IsReservedFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSerializerPublic) GetIsReservedFilterOk() (*bool, bool) {
	if o == nil || isNil(o.IsReservedFilter) {
    return nil, false
	}
	return o.IsReservedFilter, true
}

// HasIsReservedFilter returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasIsReservedFilter() bool {
	if o != nil && !isNil(o.IsReservedFilter) {
		return true
	}

	return false
}

// SetIsReservedFilter gets a reference to the given bool and assigns it to the IsReservedFilter field.
func (o *DeviceSerializerPublic) SetIsReservedFilter(v bool) {
	o.IsReservedFilter = &v
}

// GetWstkPart returns the WstkPart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceSerializerPublic) GetWstkPart() string {
	if o == nil || isNil(o.WstkPart.Get()) {
		var ret string
		return ret
	}
	return *o.WstkPart.Get()
}

// GetWstkPartOk returns a tuple with the WstkPart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceSerializerPublic) GetWstkPartOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.WstkPart.Get(), o.WstkPart.IsSet()
}

// HasWstkPart returns a boolean if a field has been set.
func (o *DeviceSerializerPublic) HasWstkPart() bool {
	if o != nil && o.WstkPart.IsSet() {
		return true
	}

	return false
}

// SetWstkPart gets a reference to the given NullableString and assigns it to the WstkPart field.
func (o *DeviceSerializerPublic) SetWstkPart(v string) {
	o.WstkPart.Set(&v)
}
// SetWstkPartNil sets the value for WstkPart to be an explicit nil
func (o *DeviceSerializerPublic) SetWstkPartNil() {
	o.WstkPart.Set(nil)
}

// UnsetWstkPart ensures that no value is present for WstkPart, not even an explicit nil
func (o *DeviceSerializerPublic) UnsetWstkPart() {
	o.WstkPart.Unset()
}

func (o DeviceSerializerPublic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.PermissionGroups != nil {
		toSerialize["permission_groups"] = o.PermissionGroups
	}
	if true {
		toSerialize["part"] = o.Part
	}
	if true {
		toSerialize["loc_desc"] = o.LocDesc
	}
	if true {
		toSerialize["is_reserved"] = o.IsReserved.Get()
	}
	if o.SnOrName.IsSet() {
		toSerialize["sn_or_name"] = o.SnOrName.Get()
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.SocketedChip) {
		toSerialize["socketed_chip"] = o.SocketedChip
	}
	if !isNil(o.IsWstk) {
		toSerialize["is_wstk"] = o.IsWstk
	}
	if o.Uri.IsSet() {
		toSerialize["uri"] = o.Uri.Get()
	}
	if !isNil(o.Online) {
		toSerialize["online"] = o.Online
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["last_update"] = o.LastUpdate
	}
	if true {
		toSerialize["date_created"] = o.DateCreated
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.IsReservedFilter) {
		toSerialize["is_reserved_filter"] = o.IsReservedFilter
	}
	if o.WstkPart.IsSet() {
		toSerialize["wstk_part"] = o.WstkPart.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceSerializerPublic struct {
	value *DeviceSerializerPublic
	isSet bool
}

func (v NullableDeviceSerializerPublic) Get() *DeviceSerializerPublic {
	return v.value
}

func (v *NullableDeviceSerializerPublic) Set(val *DeviceSerializerPublic) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSerializerPublic) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSerializerPublic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSerializerPublic(val *DeviceSerializerPublic) *NullableDeviceSerializerPublic {
	return &NullableDeviceSerializerPublic{value: val, isSet: true}
}

func (v NullableDeviceSerializerPublic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSerializerPublic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


