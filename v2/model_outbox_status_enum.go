/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// OutboxStatusEnum * `started` - started * `completed` - completed * `failed` - failed
type OutboxStatusEnum string

// List of OutboxStatusEnum
const (
	OUTBOXSTATUSENUM_STARTED OutboxStatusEnum = "started"
	OUTBOXSTATUSENUM_COMPLETED OutboxStatusEnum = "completed"
	OUTBOXSTATUSENUM_FAILED OutboxStatusEnum = "failed"
)

// All allowed values of OutboxStatusEnum enum
var AllowedOutboxStatusEnumEnumValues = []OutboxStatusEnum{
	"started",
	"completed",
	"failed",
}

func (v *OutboxStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutboxStatusEnum(value)
	for _, existing := range AllowedOutboxStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutboxStatusEnum", value)
}

// NewOutboxStatusEnumFromValue returns a pointer to a valid OutboxStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutboxStatusEnumFromValue(v string) (*OutboxStatusEnum, error) {
	ev := OutboxStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutboxStatusEnum: valid values are %v", v, AllowedOutboxStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutboxStatusEnum) IsValid() bool {
	for _, existing := range AllowedOutboxStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutboxStatusEnum value
func (v OutboxStatusEnum) Ptr() *OutboxStatusEnum {
	return &v
}

type NullableOutboxStatusEnum struct {
	value *OutboxStatusEnum
	isSet bool
}

func (v NullableOutboxStatusEnum) Get() *OutboxStatusEnum {
	return v.value
}

func (v *NullableOutboxStatusEnum) Set(val *OutboxStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboxStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboxStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboxStatusEnum(val *OutboxStatusEnum) *NullableOutboxStatusEnum {
	return &NullableOutboxStatusEnum{value: val, isSet: true}
}

func (v NullableOutboxStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboxStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

