/*
HW Mux Reservation System

Testing SitesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hwmux

import (
	"context"
	"testing"

	openapiclient "github.com/Silabs-UTF/hwmux-client-golang/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_hwmux_SitesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesAPIService SitesCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SitesAPI.SitesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesDestroy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.SitesAPI.SitesDestroy(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SitesAPI.SitesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.SitesAPI.SitesPartialUpdate(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.SitesAPI.SitesRetrieve(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesRoomsCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sitePk string

		resp, httpRes, err := apiClient.SitesAPI.SitesRoomsCreate(context.Background(), sitePk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesRoomsDestroy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var sitePk string

		httpRes, err := apiClient.SitesAPI.SitesRoomsDestroy(context.Background(), id, sitePk).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesRoomsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sitePk string

		resp, httpRes, err := apiClient.SitesAPI.SitesRoomsList(context.Background(), sitePk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesRoomsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var sitePk string

		resp, httpRes, err := apiClient.SitesAPI.SitesRoomsPartialUpdate(context.Background(), id, sitePk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesRoomsRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var sitePk string

		resp, httpRes, err := apiClient.SitesAPI.SitesRoomsRetrieve(context.Background(), id, sitePk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesRoomsUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var sitePk string

		resp, httpRes, err := apiClient.SitesAPI.SitesRoomsUpdate(context.Background(), id, sitePk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAPIService SitesUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.SitesAPI.SitesUpdate(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
