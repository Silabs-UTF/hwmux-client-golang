/*
HW Mux Reservation System

Testing PartFamiliesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hwmux

import (
	"context"
	"testing"

	openapiclient "github.com/Silabs-UTF/hwmux-client-golang/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_hwmux_PartFamiliesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PartFamiliesAPIService PartFamiliesCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesDestroy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesDestroy(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesPartialUpdate(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesPartsCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var partFamilyPk string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesPartsCreate(context.Background(), partFamilyPk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesPartsDestroy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var partFamilyPk string

		httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesPartsDestroy(context.Background(), id, partFamilyPk).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesPartsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var partFamilyPk string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesPartsList(context.Background(), partFamilyPk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesPartsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var partFamilyPk string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesPartsPartialUpdate(context.Background(), id, partFamilyPk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesPartsRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var partFamilyPk string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesPartsRetrieve(context.Background(), id, partFamilyPk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesPartsUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var partFamilyPk string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesPartsUpdate(context.Background(), id, partFamilyPk).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesRetrieve(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PartFamiliesAPIService PartFamiliesUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.PartFamiliesAPI.PartFamiliesUpdate(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
