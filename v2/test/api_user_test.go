/*
HW Mux Reservation System

Testing UserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hwmux

import (
	"context"
	"testing"

	openapiclient "github.com/Silabs-UTF/hwmux-client-golang/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_hwmux_UserAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserAPIService UserCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserAPI.UserCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserCurrentRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserAPI.UserCurrentRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserCurrentTokenCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserAPI.UserCurrentTokenCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserCurrentTokenRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserAPI.UserCurrentTokenRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserDestroy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var usernameOrId string

		httpRes, err := apiClient.UserAPI.UserDestroy(context.Background(), usernameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserAPI.UserList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserPartialUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var usernameOrId string

		resp, httpRes, err := apiClient.UserAPI.UserPartialUpdate(context.Background(), usernameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var usernameOrId string

		resp, httpRes, err := apiClient.UserAPI.UserRetrieve(context.Background(), usernameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserTokenCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var usernameOrId string

		resp, httpRes, err := apiClient.UserAPI.UserTokenCreate(context.Background(), usernameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserTokenRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var usernameOrId string

		resp, httpRes, err := apiClient.UserAPI.UserTokenRetrieve(context.Background(), usernameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var usernameOrId string

		resp, httpRes, err := apiClient.UserAPI.UserUpdate(context.Background(), usernameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
