/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.26.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourcePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourcePermissions{}

// ResourcePermissions struct for ResourcePermissions
type ResourcePermissions struct {
	Id int32 `json:"id"`
	Permissions []PermissionsEnum `json:"permissions,omitempty"`
}

type _ResourcePermissions ResourcePermissions

// NewResourcePermissions instantiates a new ResourcePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcePermissions(id int32) *ResourcePermissions {
	this := ResourcePermissions{}
	this.Id = id
	return &this
}

// NewResourcePermissionsWithDefaults instantiates a new ResourcePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcePermissionsWithDefaults() *ResourcePermissions {
	this := ResourcePermissions{}
	return &this
}

// GetId returns the Id field value
func (o *ResourcePermissions) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourcePermissions) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourcePermissions) SetId(v int32) {
	o.Id = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ResourcePermissions) GetPermissions() []PermissionsEnum {
	if o == nil || IsNil(o.Permissions) {
		var ret []PermissionsEnum
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourcePermissions) GetPermissionsOk() ([]PermissionsEnum, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ResourcePermissions) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []PermissionsEnum and assigns it to the Permissions field.
func (o *ResourcePermissions) SetPermissions(v []PermissionsEnum) {
	o.Permissions = v
}

func (o ResourcePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourcePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

func (o *ResourcePermissions) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourcePermissions := _ResourcePermissions{}

	err = json.Unmarshal(bytes, &varResourcePermissions)

	if err != nil {
		return err
	}

	*o = ResourcePermissions(varResourcePermissions)

	return err
}

type NullableResourcePermissions struct {
	value *ResourcePermissions
	isSet bool
}

func (v NullableResourcePermissions) Get() *ResourcePermissions {
	return v.value
}

func (v *NullableResourcePermissions) Set(val *ResourcePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcePermissions(val *ResourcePermissions) *NullableResourcePermissions {
	return &NullableResourcePermissions{value: val, isSet: true}
}

func (v NullableResourcePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


