/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// ReservationStatusEnum * `CRE_PEND` - create_pending * `QUE` - queued * `RES_PEND` - reservation_pending * `ACT` - active * `CAN_PEND` - cancel_pending * `REL_PEND` - release_pending * `FIN` - finished * `EXP_PEND` - expire_pending * `EXP` - expired * `FAIL` - failed
type ReservationStatusEnum string

// List of ReservationStatusEnum
const (
	RESERVATIONSTATUSENUM_CRE_PEND ReservationStatusEnum = "CRE_PEND"
	RESERVATIONSTATUSENUM_QUE ReservationStatusEnum = "QUE"
	RESERVATIONSTATUSENUM_RES_PEND ReservationStatusEnum = "RES_PEND"
	RESERVATIONSTATUSENUM_ACT ReservationStatusEnum = "ACT"
	RESERVATIONSTATUSENUM_CAN_PEND ReservationStatusEnum = "CAN_PEND"
	RESERVATIONSTATUSENUM_REL_PEND ReservationStatusEnum = "REL_PEND"
	RESERVATIONSTATUSENUM_FIN ReservationStatusEnum = "FIN"
	RESERVATIONSTATUSENUM_EXP_PEND ReservationStatusEnum = "EXP_PEND"
	RESERVATIONSTATUSENUM_EXP ReservationStatusEnum = "EXP"
	RESERVATIONSTATUSENUM_FAIL ReservationStatusEnum = "FAIL"
)

// All allowed values of ReservationStatusEnum enum
var AllowedReservationStatusEnumEnumValues = []ReservationStatusEnum{
	"CRE_PEND",
	"QUE",
	"RES_PEND",
	"ACT",
	"CAN_PEND",
	"REL_PEND",
	"FIN",
	"EXP_PEND",
	"EXP",
	"FAIL",
}

func (v *ReservationStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReservationStatusEnum(value)
	for _, existing := range AllowedReservationStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReservationStatusEnum", value)
}

// NewReservationStatusEnumFromValue returns a pointer to a valid ReservationStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReservationStatusEnumFromValue(v string) (*ReservationStatusEnum, error) {
	ev := ReservationStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReservationStatusEnum: valid values are %v", v, AllowedReservationStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReservationStatusEnum) IsValid() bool {
	for _, existing := range AllowedReservationStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReservationStatusEnum value
func (v ReservationStatusEnum) Ptr() *ReservationStatusEnum {
	return &v
}

type NullableReservationStatusEnum struct {
	value *ReservationStatusEnum
	isSet bool
}

func (v NullableReservationStatusEnum) Get() *ReservationStatusEnum {
	return v.value
}

func (v *NullableReservationStatusEnum) Set(val *ReservationStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationStatusEnum(val *ReservationStatusEnum) *NullableReservationStatusEnum {
	return &NullableReservationStatusEnum{value: val, isSet: true}
}

func (v NullableReservationStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

