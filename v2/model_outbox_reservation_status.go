/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.37.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// OutboxReservationStatus - struct for OutboxReservationStatus
type OutboxReservationStatus struct {
	BlankEnum *BlankEnum
	ReservationStatusEnum *ReservationStatusEnum
}

// BlankEnumAsOutboxReservationStatus is a convenience function that returns BlankEnum wrapped in OutboxReservationStatus
func BlankEnumAsOutboxReservationStatus(v *BlankEnum) OutboxReservationStatus {
	return OutboxReservationStatus{
		BlankEnum: v,
	}
}

// ReservationStatusEnumAsOutboxReservationStatus is a convenience function that returns ReservationStatusEnum wrapped in OutboxReservationStatus
func ReservationStatusEnumAsOutboxReservationStatus(v *ReservationStatusEnum) OutboxReservationStatus {
	return OutboxReservationStatus{
		ReservationStatusEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OutboxReservationStatus) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BlankEnum
	err = newStrictDecoder(data).Decode(&dst.BlankEnum)
	if err == nil {
		jsonBlankEnum, _ := json.Marshal(dst.BlankEnum)
		if string(jsonBlankEnum) == "{}" { // empty struct
			dst.BlankEnum = nil
		} else {
			match++
		}
	} else {
		dst.BlankEnum = nil
	}

	// try to unmarshal data into ReservationStatusEnum
	err = newStrictDecoder(data).Decode(&dst.ReservationStatusEnum)
	if err == nil {
		jsonReservationStatusEnum, _ := json.Marshal(dst.ReservationStatusEnum)
		if string(jsonReservationStatusEnum) == "{}" { // empty struct
			dst.ReservationStatusEnum = nil
		} else {
			match++
		}
	} else {
		dst.ReservationStatusEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BlankEnum = nil
		dst.ReservationStatusEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OutboxReservationStatus)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OutboxReservationStatus)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OutboxReservationStatus) MarshalJSON() ([]byte, error) {
	if src.BlankEnum != nil {
		return json.Marshal(&src.BlankEnum)
	}

	if src.ReservationStatusEnum != nil {
		return json.Marshal(&src.ReservationStatusEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OutboxReservationStatus) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BlankEnum != nil {
		return obj.BlankEnum
	}

	if obj.ReservationStatusEnum != nil {
		return obj.ReservationStatusEnum
	}

	// all schemas are nil
	return nil
}

type NullableOutboxReservationStatus struct {
	value *OutboxReservationStatus
	isSet bool
}

func (v NullableOutboxReservationStatus) Get() *OutboxReservationStatus {
	return v.value
}

func (v *NullableOutboxReservationStatus) Set(val *OutboxReservationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboxReservationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboxReservationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboxReservationStatus(val *OutboxReservationStatus) *NullableOutboxReservationStatus {
	return &NullableOutboxReservationStatus{value: val, isSet: true}
}

func (v NullableOutboxReservationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboxReservationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


