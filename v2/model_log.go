/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.36.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"time"
)

// Log struct for Log
type Log struct {
	Id int32 `json:"id"`
	Owner string `json:"owner"`
	Event EventEnum `json:"event"`
	Datetime time.Time `json:"datetime"`
	ResourceName NullableString `json:"resource_name,omitempty"`
	ResourceType NullableLogResourceType `json:"resource_type,omitempty"`
	Status *LogStatusEnum `json:"status,omitempty"`
	Details *string `json:"details,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Device NullableInt32 `json:"device,omitempty"`
	DeviceGroup NullableInt32 `json:"device_group,omitempty"`
	DeviceGroupLabel NullableInt32 `json:"device_group_label,omitempty"`
	CausedBy NullableInt32 `json:"caused_by,omitempty"`
}

// NewLog instantiates a new Log object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLog(id int32, owner string, event EventEnum, datetime time.Time) *Log {
	this := Log{}
	this.Id = id
	this.Owner = owner
	this.Event = event
	this.Datetime = datetime
	return &this
}

// NewLogWithDefaults instantiates a new Log object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogWithDefaults() *Log {
	this := Log{}
	return &this
}

// GetId returns the Id field value
func (o *Log) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Log) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Log) SetId(v int32) {
	o.Id = v
}

// GetOwner returns the Owner field value
func (o *Log) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *Log) GetOwnerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *Log) SetOwner(v string) {
	o.Owner = v
}

// GetEvent returns the Event field value
func (o *Log) GetEvent() EventEnum {
	if o == nil {
		var ret EventEnum
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *Log) GetEventOk() (*EventEnum, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *Log) SetEvent(v EventEnum) {
	o.Event = v
}

// GetDatetime returns the Datetime field value
func (o *Log) GetDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *Log) GetDatetimeOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *Log) SetDatetime(v time.Time) {
	o.Datetime = v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Log) GetResourceName() string {
	if o == nil || isNil(o.ResourceName.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetResourceNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *Log) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableString and assigns it to the ResourceName field.
func (o *Log) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}
// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *Log) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *Log) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Log) GetResourceType() LogResourceType {
	if o == nil || isNil(o.ResourceType.Get()) {
		var ret LogResourceType
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetResourceTypeOk() (*LogResourceType, bool) {
	if o == nil {
    return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *Log) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given NullableLogResourceType and assigns it to the ResourceType field.
func (o *Log) SetResourceType(v LogResourceType) {
	o.ResourceType.Set(&v)
}
// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *Log) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *Log) UnsetResourceType() {
	o.ResourceType.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Log) GetStatus() LogStatusEnum {
	if o == nil || isNil(o.Status) {
		var ret LogStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetStatusOk() (*LogStatusEnum, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Log) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given LogStatusEnum and assigns it to the Status field.
func (o *Log) SetStatus(v LogStatusEnum) {
	o.Status = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Log) GetDetails() string {
	if o == nil || isNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetDetailsOk() (*string, bool) {
	if o == nil || isNil(o.Details) {
    return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Log) HasDetails() bool {
	if o != nil && !isNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *Log) SetDetails(v string) {
	o.Details = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Log) GetMetadata() map[string]interface{} {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Log) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
    return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Log) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Log) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetDevice returns the Device field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Log) GetDevice() int32 {
	if o == nil || isNil(o.Device.Get()) {
		var ret int32
		return ret
	}
	return *o.Device.Get()
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetDeviceOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Device.Get(), o.Device.IsSet()
}

// HasDevice returns a boolean if a field has been set.
func (o *Log) HasDevice() bool {
	if o != nil && o.Device.IsSet() {
		return true
	}

	return false
}

// SetDevice gets a reference to the given NullableInt32 and assigns it to the Device field.
func (o *Log) SetDevice(v int32) {
	o.Device.Set(&v)
}
// SetDeviceNil sets the value for Device to be an explicit nil
func (o *Log) SetDeviceNil() {
	o.Device.Set(nil)
}

// UnsetDevice ensures that no value is present for Device, not even an explicit nil
func (o *Log) UnsetDevice() {
	o.Device.Unset()
}

// GetDeviceGroup returns the DeviceGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Log) GetDeviceGroup() int32 {
	if o == nil || isNil(o.DeviceGroup.Get()) {
		var ret int32
		return ret
	}
	return *o.DeviceGroup.Get()
}

// GetDeviceGroupOk returns a tuple with the DeviceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetDeviceGroupOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.DeviceGroup.Get(), o.DeviceGroup.IsSet()
}

// HasDeviceGroup returns a boolean if a field has been set.
func (o *Log) HasDeviceGroup() bool {
	if o != nil && o.DeviceGroup.IsSet() {
		return true
	}

	return false
}

// SetDeviceGroup gets a reference to the given NullableInt32 and assigns it to the DeviceGroup field.
func (o *Log) SetDeviceGroup(v int32) {
	o.DeviceGroup.Set(&v)
}
// SetDeviceGroupNil sets the value for DeviceGroup to be an explicit nil
func (o *Log) SetDeviceGroupNil() {
	o.DeviceGroup.Set(nil)
}

// UnsetDeviceGroup ensures that no value is present for DeviceGroup, not even an explicit nil
func (o *Log) UnsetDeviceGroup() {
	o.DeviceGroup.Unset()
}

// GetDeviceGroupLabel returns the DeviceGroupLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Log) GetDeviceGroupLabel() int32 {
	if o == nil || isNil(o.DeviceGroupLabel.Get()) {
		var ret int32
		return ret
	}
	return *o.DeviceGroupLabel.Get()
}

// GetDeviceGroupLabelOk returns a tuple with the DeviceGroupLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetDeviceGroupLabelOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.DeviceGroupLabel.Get(), o.DeviceGroupLabel.IsSet()
}

// HasDeviceGroupLabel returns a boolean if a field has been set.
func (o *Log) HasDeviceGroupLabel() bool {
	if o != nil && o.DeviceGroupLabel.IsSet() {
		return true
	}

	return false
}

// SetDeviceGroupLabel gets a reference to the given NullableInt32 and assigns it to the DeviceGroupLabel field.
func (o *Log) SetDeviceGroupLabel(v int32) {
	o.DeviceGroupLabel.Set(&v)
}
// SetDeviceGroupLabelNil sets the value for DeviceGroupLabel to be an explicit nil
func (o *Log) SetDeviceGroupLabelNil() {
	o.DeviceGroupLabel.Set(nil)
}

// UnsetDeviceGroupLabel ensures that no value is present for DeviceGroupLabel, not even an explicit nil
func (o *Log) UnsetDeviceGroupLabel() {
	o.DeviceGroupLabel.Unset()
}

// GetCausedBy returns the CausedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Log) GetCausedBy() int32 {
	if o == nil || isNil(o.CausedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.CausedBy.Get()
}

// GetCausedByOk returns a tuple with the CausedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Log) GetCausedByOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.CausedBy.Get(), o.CausedBy.IsSet()
}

// HasCausedBy returns a boolean if a field has been set.
func (o *Log) HasCausedBy() bool {
	if o != nil && o.CausedBy.IsSet() {
		return true
	}

	return false
}

// SetCausedBy gets a reference to the given NullableInt32 and assigns it to the CausedBy field.
func (o *Log) SetCausedBy(v int32) {
	o.CausedBy.Set(&v)
}
// SetCausedByNil sets the value for CausedBy to be an explicit nil
func (o *Log) SetCausedByNil() {
	o.CausedBy.Set(nil)
}

// UnsetCausedBy ensures that no value is present for CausedBy, not even an explicit nil
func (o *Log) UnsetCausedBy() {
	o.CausedBy.Unset()
}

func (o Log) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["datetime"] = o.Datetime
	}
	if o.ResourceName.IsSet() {
		toSerialize["resource_name"] = o.ResourceName.Get()
	}
	if o.ResourceType.IsSet() {
		toSerialize["resource_type"] = o.ResourceType.Get()
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Device.IsSet() {
		toSerialize["device"] = o.Device.Get()
	}
	if o.DeviceGroup.IsSet() {
		toSerialize["device_group"] = o.DeviceGroup.Get()
	}
	if o.DeviceGroupLabel.IsSet() {
		toSerialize["device_group_label"] = o.DeviceGroupLabel.Get()
	}
	if o.CausedBy.IsSet() {
		toSerialize["caused_by"] = o.CausedBy.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLog struct {
	value *Log
	isSet bool
}

func (v NullableLog) Get() *Log {
	return v.value
}

func (v *NullableLog) Set(val *Log) {
	v.value = val
	v.isSet = true
}

func (v NullableLog) IsSet() bool {
	return v.isSet
}

func (v *NullableLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLog(val *Log) *NullableLog {
	return &NullableLog{value: val, isSet: true}
}

func (v NullableLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


