/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.31.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"fmt"
)

// DeviceGroupSource - struct for DeviceGroupSource
type DeviceGroupSource struct {
	BlankEnum *BlankEnum
	SourceEnum *SourceEnum
}

// BlankEnumAsDeviceGroupSource is a convenience function that returns BlankEnum wrapped in DeviceGroupSource
func BlankEnumAsDeviceGroupSource(v *BlankEnum) DeviceGroupSource {
	return DeviceGroupSource{
		BlankEnum: v,
	}
}

// SourceEnumAsDeviceGroupSource is a convenience function that returns SourceEnum wrapped in DeviceGroupSource
func SourceEnumAsDeviceGroupSource(v *SourceEnum) DeviceGroupSource {
	return DeviceGroupSource{
		SourceEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeviceGroupSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BlankEnum
	err = newStrictDecoder(data).Decode(&dst.BlankEnum)
	if err == nil {
		jsonBlankEnum, _ := json.Marshal(dst.BlankEnum)
		if string(jsonBlankEnum) == "{}" { // empty struct
			dst.BlankEnum = nil
		} else {
			match++
		}
	} else {
		dst.BlankEnum = nil
	}

	// try to unmarshal data into SourceEnum
	err = newStrictDecoder(data).Decode(&dst.SourceEnum)
	if err == nil {
		jsonSourceEnum, _ := json.Marshal(dst.SourceEnum)
		if string(jsonSourceEnum) == "{}" { // empty struct
			dst.SourceEnum = nil
		} else {
			match++
		}
	} else {
		dst.SourceEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BlankEnum = nil
		dst.SourceEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeviceGroupSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeviceGroupSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeviceGroupSource) MarshalJSON() ([]byte, error) {
	if src.BlankEnum != nil {
		return json.Marshal(&src.BlankEnum)
	}

	if src.SourceEnum != nil {
		return json.Marshal(&src.SourceEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeviceGroupSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BlankEnum != nil {
		return obj.BlankEnum
	}

	if obj.SourceEnum != nil {
		return obj.SourceEnum
	}

	// all schemas are nil
	return nil
}

type NullableDeviceGroupSource struct {
	value *DeviceGroupSource
	isSet bool
}

func (v NullableDeviceGroupSource) Get() *DeviceGroupSource {
	return v.value
}

func (v *NullableDeviceGroupSource) Set(val *DeviceGroupSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceGroupSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceGroupSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceGroupSource(val *DeviceGroupSource) *NullableDeviceGroupSource {
	return &NullableDeviceGroupSource{value: val, isSet: true}
}

func (v NullableDeviceGroupSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceGroupSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


