/*
HW Mux Reservation System

Testing PartFamiliesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_PartFamiliesApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PartFamiliesApiService PartFamiliesCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesCreate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesDestroy(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesPartialUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesPartialUpdate(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesPartsCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partFamilyPk string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesPartsCreate(context.Background(), partFamilyPk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesPartsDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var partFamilyPk string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesPartsDestroy(context.Background(), id, partFamilyPk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesPartsList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var partFamilyPk string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesPartsList(context.Background(), partFamilyPk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesPartsPartialUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var partFamilyPk string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesPartsPartialUpdate(context.Background(), id, partFamilyPk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesPartsRetrieve", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var partFamilyPk string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesPartsRetrieve(context.Background(), id, partFamilyPk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesPartsUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var partFamilyPk string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesPartsUpdate(context.Background(), id, partFamilyPk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesRetrieve", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesRetrieve(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PartFamiliesApiService PartFamiliesUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.PartFamiliesApi.PartFamiliesUpdate(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
