/*
HW Mux Reservation System

Testing PermissionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_PermissionsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PermissionsApiService PermissionsGroupsCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsCreate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDeviceGroupsCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDeviceGroupsCreate(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDeviceGroupsDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDeviceGroupsDestroy(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDeviceGroupsList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDeviceGroupsList(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDeviceGroupsPartialUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDeviceGroupsPartialUpdate(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDeviceGroupsUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDeviceGroupsUpdate(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDevicesCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDevicesCreate(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDevicesDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDevicesDestroy(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDevicesList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDevicesList(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDevicesPartialUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDevicesPartialUpdate(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsDevicesUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsDevicesUpdate(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsLabelsCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsLabelsCreate(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsLabelsDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsLabelsDestroy(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsLabelsList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsLabelsList(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsLabelsPartialUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsLabelsPartialUpdate(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsLabelsUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var id int32

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsLabelsUpdate(context.Background(), groupName, id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsRetrieve", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsRetrieve(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsUsersCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsUsersCreate(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PermissionsApiService PermissionsGroupsUsersDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string
        var username string

        resp, httpRes, err := apiClient.PermissionsApi.PermissionsGroupsUsersDestroy(context.Background(), groupName, username).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
