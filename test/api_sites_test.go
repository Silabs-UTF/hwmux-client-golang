/*
HW Mux Reservation System

Testing SitesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_SitesApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test SitesApiService SitesCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SitesApi.SitesCreate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.SitesApi.SitesDestroy(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SitesApi.SitesList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesPartialUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.SitesApi.SitesPartialUpdate(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesRetrieve", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.SitesApi.SitesRetrieve(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesRoomsCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sitePk string

        resp, httpRes, err := apiClient.SitesApi.SitesRoomsCreate(context.Background(), sitePk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesRoomsDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var sitePk string

        resp, httpRes, err := apiClient.SitesApi.SitesRoomsDestroy(context.Background(), id, sitePk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesRoomsList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sitePk string

        resp, httpRes, err := apiClient.SitesApi.SitesRoomsList(context.Background(), sitePk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesRoomsPartialUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var sitePk string

        resp, httpRes, err := apiClient.SitesApi.SitesRoomsPartialUpdate(context.Background(), id, sitePk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesRoomsRetrieve", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var sitePk string

        resp, httpRes, err := apiClient.SitesApi.SitesRoomsRetrieve(context.Background(), id, sitePk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesRoomsUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string
        var sitePk string

        resp, httpRes, err := apiClient.SitesApi.SitesRoomsUpdate(context.Background(), id, sitePk).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SitesApiService SitesUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string

        resp, httpRes, err := apiClient.SitesApi.SitesUpdate(context.Background(), name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
