/*
HW Mux Reservation System

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hwmux

import (
	"encoding/json"
	"time"
)

// ReservationSessionSerializerReadOnly struct for ReservationSessionSerializerReadOnly
type ReservationSessionSerializerReadOnly struct {
	Id string `json:"id"`
	Owner NullableReservationSessionSerializerReadOnlyOwner `json:"owner"`
	IsSatisfied bool `json:"is_satisfied"`
	ResponseMessage string `json:"response_message"`
	Status string `json:"status"`
	Details string `json:"details"`
	UseWatchdog *bool `json:"use_watchdog,omitempty"`
	TRequested time.Time `json:"t_requested"`
	TSatisfied NullableTime `json:"t_satisfied"`
	TCompleted NullableTime `json:"t_completed"`
	TLeaseExpires NullableTime `json:"t_lease_expires"`
	Metadata map[string]interface{} `json:"metadata"`
	RDevices []int32 `json:"r_devices"`
	RDeviceGroups []int32 `json:"r_device_groups"`
	RDeviceGroupLabels []int32 `json:"r_device_group_labels"`
	ADevices []int32 `json:"a_devices"`
	ADeviceGroups []int32 `json:"a_device_groups"`
}

// NewReservationSessionSerializerReadOnly instantiates a new ReservationSessionSerializerReadOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationSessionSerializerReadOnly(id string, owner NullableReservationSessionSerializerReadOnlyOwner, isSatisfied bool, responseMessage string, status string, details string, tRequested time.Time, tSatisfied NullableTime, tCompleted NullableTime, tLeaseExpires NullableTime, metadata map[string]interface{}, rDevices []int32, rDeviceGroups []int32, rDeviceGroupLabels []int32, aDevices []int32, aDeviceGroups []int32) *ReservationSessionSerializerReadOnly {
	this := ReservationSessionSerializerReadOnly{}
	this.Id = id
	this.Owner = owner
	this.IsSatisfied = isSatisfied
	this.ResponseMessage = responseMessage
	this.Status = status
	this.Details = details
	this.TRequested = tRequested
	this.TSatisfied = tSatisfied
	this.TCompleted = tCompleted
	this.TLeaseExpires = tLeaseExpires
	this.Metadata = metadata
	this.RDevices = rDevices
	this.RDeviceGroups = rDeviceGroups
	this.RDeviceGroupLabels = rDeviceGroupLabels
	this.ADevices = aDevices
	this.ADeviceGroups = aDeviceGroups
	return &this
}

// NewReservationSessionSerializerReadOnlyWithDefaults instantiates a new ReservationSessionSerializerReadOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationSessionSerializerReadOnlyWithDefaults() *ReservationSessionSerializerReadOnly {
	this := ReservationSessionSerializerReadOnly{}
	return &this
}

// GetId returns the Id field value
func (o *ReservationSessionSerializerReadOnly) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReservationSessionSerializerReadOnly) SetId(v string) {
	o.Id = v
}

// GetOwner returns the Owner field value
// If the value is explicit nil, the zero value for ReservationSessionSerializerReadOnlyOwner will be returned
func (o *ReservationSessionSerializerReadOnly) GetOwner() ReservationSessionSerializerReadOnlyOwner {
	if o == nil || o.Owner.Get() == nil {
		var ret ReservationSessionSerializerReadOnlyOwner
		return ret
	}

	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReservationSessionSerializerReadOnly) GetOwnerOk() (*ReservationSessionSerializerReadOnlyOwner, bool) {
	if o == nil {
    return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// SetOwner sets field value
func (o *ReservationSessionSerializerReadOnly) SetOwner(v ReservationSessionSerializerReadOnlyOwner) {
	o.Owner.Set(&v)
}

// GetIsSatisfied returns the IsSatisfied field value
func (o *ReservationSessionSerializerReadOnly) GetIsSatisfied() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSatisfied
}

// GetIsSatisfiedOk returns a tuple with the IsSatisfied field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetIsSatisfiedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsSatisfied, true
}

// SetIsSatisfied sets field value
func (o *ReservationSessionSerializerReadOnly) SetIsSatisfied(v bool) {
	o.IsSatisfied = v
}

// GetResponseMessage returns the ResponseMessage field value
func (o *ReservationSessionSerializerReadOnly) GetResponseMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetResponseMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ResponseMessage, true
}

// SetResponseMessage sets field value
func (o *ReservationSessionSerializerReadOnly) SetResponseMessage(v string) {
	o.ResponseMessage = v
}

// GetStatus returns the Status field value
func (o *ReservationSessionSerializerReadOnly) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ReservationSessionSerializerReadOnly) SetStatus(v string) {
	o.Status = v
}

// GetDetails returns the Details field value
func (o *ReservationSessionSerializerReadOnly) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetDetailsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *ReservationSessionSerializerReadOnly) SetDetails(v string) {
	o.Details = v
}

// GetUseWatchdog returns the UseWatchdog field value if set, zero value otherwise.
func (o *ReservationSessionSerializerReadOnly) GetUseWatchdog() bool {
	if o == nil || isNil(o.UseWatchdog) {
		var ret bool
		return ret
	}
	return *o.UseWatchdog
}

// GetUseWatchdogOk returns a tuple with the UseWatchdog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetUseWatchdogOk() (*bool, bool) {
	if o == nil || isNil(o.UseWatchdog) {
    return nil, false
	}
	return o.UseWatchdog, true
}

// HasUseWatchdog returns a boolean if a field has been set.
func (o *ReservationSessionSerializerReadOnly) HasUseWatchdog() bool {
	if o != nil && !isNil(o.UseWatchdog) {
		return true
	}

	return false
}

// SetUseWatchdog gets a reference to the given bool and assigns it to the UseWatchdog field.
func (o *ReservationSessionSerializerReadOnly) SetUseWatchdog(v bool) {
	o.UseWatchdog = &v
}

// GetTRequested returns the TRequested field value
func (o *ReservationSessionSerializerReadOnly) GetTRequested() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TRequested
}

// GetTRequestedOk returns a tuple with the TRequested field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetTRequestedOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TRequested, true
}

// SetTRequested sets field value
func (o *ReservationSessionSerializerReadOnly) SetTRequested(v time.Time) {
	o.TRequested = v
}

// GetTSatisfied returns the TSatisfied field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ReservationSessionSerializerReadOnly) GetTSatisfied() time.Time {
	if o == nil || o.TSatisfied.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.TSatisfied.Get()
}

// GetTSatisfiedOk returns a tuple with the TSatisfied field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReservationSessionSerializerReadOnly) GetTSatisfiedOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.TSatisfied.Get(), o.TSatisfied.IsSet()
}

// SetTSatisfied sets field value
func (o *ReservationSessionSerializerReadOnly) SetTSatisfied(v time.Time) {
	o.TSatisfied.Set(&v)
}

// GetTCompleted returns the TCompleted field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ReservationSessionSerializerReadOnly) GetTCompleted() time.Time {
	if o == nil || o.TCompleted.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.TCompleted.Get()
}

// GetTCompletedOk returns a tuple with the TCompleted field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReservationSessionSerializerReadOnly) GetTCompletedOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.TCompleted.Get(), o.TCompleted.IsSet()
}

// SetTCompleted sets field value
func (o *ReservationSessionSerializerReadOnly) SetTCompleted(v time.Time) {
	o.TCompleted.Set(&v)
}

// GetTLeaseExpires returns the TLeaseExpires field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ReservationSessionSerializerReadOnly) GetTLeaseExpires() time.Time {
	if o == nil || o.TLeaseExpires.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.TLeaseExpires.Get()
}

// GetTLeaseExpiresOk returns a tuple with the TLeaseExpires field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReservationSessionSerializerReadOnly) GetTLeaseExpiresOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.TLeaseExpires.Get(), o.TLeaseExpires.IsSet()
}

// SetTLeaseExpires sets field value
func (o *ReservationSessionSerializerReadOnly) SetTLeaseExpires(v time.Time) {
	o.TLeaseExpires.Set(&v)
}

// GetMetadata returns the Metadata field value
func (o *ReservationSessionSerializerReadOnly) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ReservationSessionSerializerReadOnly) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetRDevices returns the RDevices field value
func (o *ReservationSessionSerializerReadOnly) GetRDevices() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.RDevices
}

// GetRDevicesOk returns a tuple with the RDevices field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetRDevicesOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.RDevices, true
}

// SetRDevices sets field value
func (o *ReservationSessionSerializerReadOnly) SetRDevices(v []int32) {
	o.RDevices = v
}

// GetRDeviceGroups returns the RDeviceGroups field value
func (o *ReservationSessionSerializerReadOnly) GetRDeviceGroups() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.RDeviceGroups
}

// GetRDeviceGroupsOk returns a tuple with the RDeviceGroups field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetRDeviceGroupsOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.RDeviceGroups, true
}

// SetRDeviceGroups sets field value
func (o *ReservationSessionSerializerReadOnly) SetRDeviceGroups(v []int32) {
	o.RDeviceGroups = v
}

// GetRDeviceGroupLabels returns the RDeviceGroupLabels field value
func (o *ReservationSessionSerializerReadOnly) GetRDeviceGroupLabels() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.RDeviceGroupLabels
}

// GetRDeviceGroupLabelsOk returns a tuple with the RDeviceGroupLabels field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetRDeviceGroupLabelsOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.RDeviceGroupLabels, true
}

// SetRDeviceGroupLabels sets field value
func (o *ReservationSessionSerializerReadOnly) SetRDeviceGroupLabels(v []int32) {
	o.RDeviceGroupLabels = v
}

// GetADevices returns the ADevices field value
func (o *ReservationSessionSerializerReadOnly) GetADevices() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ADevices
}

// GetADevicesOk returns a tuple with the ADevices field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetADevicesOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ADevices, true
}

// SetADevices sets field value
func (o *ReservationSessionSerializerReadOnly) SetADevices(v []int32) {
	o.ADevices = v
}

// GetADeviceGroups returns the ADeviceGroups field value
func (o *ReservationSessionSerializerReadOnly) GetADeviceGroups() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ADeviceGroups
}

// GetADeviceGroupsOk returns a tuple with the ADeviceGroups field value
// and a boolean to check if the value has been set.
func (o *ReservationSessionSerializerReadOnly) GetADeviceGroupsOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ADeviceGroups, true
}

// SetADeviceGroups sets field value
func (o *ReservationSessionSerializerReadOnly) SetADeviceGroups(v []int32) {
	o.ADeviceGroups = v
}

func (o ReservationSessionSerializerReadOnly) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["owner"] = o.Owner.Get()
	}
	if true {
		toSerialize["is_satisfied"] = o.IsSatisfied
	}
	if true {
		toSerialize["response_message"] = o.ResponseMessage
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["details"] = o.Details
	}
	if !isNil(o.UseWatchdog) {
		toSerialize["use_watchdog"] = o.UseWatchdog
	}
	if true {
		toSerialize["t_requested"] = o.TRequested
	}
	if true {
		toSerialize["t_satisfied"] = o.TSatisfied.Get()
	}
	if true {
		toSerialize["t_completed"] = o.TCompleted.Get()
	}
	if true {
		toSerialize["t_lease_expires"] = o.TLeaseExpires.Get()
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["r_devices"] = o.RDevices
	}
	if true {
		toSerialize["r_device_groups"] = o.RDeviceGroups
	}
	if true {
		toSerialize["r_device_group_labels"] = o.RDeviceGroupLabels
	}
	if true {
		toSerialize["a_devices"] = o.ADevices
	}
	if true {
		toSerialize["a_device_groups"] = o.ADeviceGroups
	}
	return json.Marshal(toSerialize)
}

type NullableReservationSessionSerializerReadOnly struct {
	value *ReservationSessionSerializerReadOnly
	isSet bool
}

func (v NullableReservationSessionSerializerReadOnly) Get() *ReservationSessionSerializerReadOnly {
	return v.value
}

func (v *NullableReservationSessionSerializerReadOnly) Set(val *ReservationSessionSerializerReadOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationSessionSerializerReadOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationSessionSerializerReadOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationSessionSerializerReadOnly(val *ReservationSessionSerializerReadOnly) *NullableReservationSessionSerializerReadOnly {
	return &NullableReservationSessionSerializerReadOnly{value: val, isSet: true}
}

func (v NullableReservationSessionSerializerReadOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationSessionSerializerReadOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


